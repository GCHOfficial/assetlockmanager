# Environment variables for docker-compose

# Flask App
FLASK_APP=server/app.py
FLASK_DEBUG=0 # Set to 1 for development debugging

# Database (PostgreSQL)
# Replace with your desired credentials
POSTGRES_USER=locks_user
POSTGRES_PASSWORD=replace_with_strong_password
POSTGRES_DB=locks_db

# JWT
# Replace with a strong, randomly generated secret key
JWT_SECRET_KEY=replace_this_with_a_very_strong_random_secret_key
# Optional: JWT Expiration in minutes (e.g., 60 for 1 hour). Leave unset or 0 for no expiration.
# JWT_ACCESS_TOKEN_EXPIRES_MINUTES=60

# Rate Limiter (Points to the redis service in docker-compose)
RATELIMIT_STORAGE_URI=redis://alm-redis:6379/0

# Initial Admin User (Optional - set if you want auto-creation on first run)
INITIAL_ADMIN_USERNAME=admin
INITIAL_ADMIN_PASSWORD=replace_with_admin_password
INITIAL_ADMIN_EMAIL=admin@example.com

# Email Configuration (Optional - can also be set via Admin UI)
# Replace with your SMTP server details if using environment config
MAIL_SERVER=smtp.example.com
MAIL_PORT=587
MAIL_USE_TLS=true
MAIL_USE_SSL=false
MAIL_USERNAME=your-email@example.com
MAIL_PASSWORD=your-email-password
MAIL_DEFAULT_SENDER="App Name <noreply@example.com>"
MAIL_ENABLED=true

# Frontend URL (for email links etc.)
FRONTEND_BASE_URL=https://your-production-domain.com:8080

# --- Optional: Custom CA Certificate Trust ---
# Use these if your API needs to trust a custom CA certificate (e.g., for internal
# services like an SMTP server using a self-signed or private CA certificate).
# 1. Set CUSTOM_CA_CERT_PATH to the location *inside the container* where you will mount the certificate file.
# 2. (Optional) Set CUSTOM_CA_CERT_FILENAME for the desired filename in the container's trust store.
# 3. Add a volume mount in docker-compose.yml / docker-compose.prod.yml to map your host certificate
#    file to the path specified in CUSTOM_CA_CERT_PATH.
# Example:
# CUSTOM_CA_CERT_PATH=/etc/custom-certs/my-internal-ca.pem
# CUSTOM_CA_CERT_FILENAME=my-internal-ca.crt

# --- Optional: Pre-built Docker Images ---
# Uncomment and set to use images from a registry (like GHCR)
# Replace <owner>/<repo> with your GitHub username/organization and repository name
# FRONTEND_IMAGE=ghcr.io/gchofficial/assetlockmanager/frontend:latest
# API_IMAGE=ghcr.io/gchofficial/assetlockmanager/api:latest