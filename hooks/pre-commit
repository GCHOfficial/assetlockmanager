#!/bin/sh
# Asset Lock Manager Pre-Commit Hook
#
# Checks staged .uasset and .umap files against the lock server.
# Prevents commits if assets are locked by *another* user.
#
# Requires: python3, requests, git, jq, configured asset_lock_manager.py

# Set VERBOSE to non-empty for detailed output (e.g., export ASSET_LOCK_HOOK_VERBOSE=1)
VERBOSE="${ASSET_LOCK_HOOK_VERBOSE}"

# Set this variable to the command needed to execute the client script.
# Assumes asset_lock_manager.py is at the repository root where this hook runs.
CLIENT_SCRIPT_CMD="python ./asset_lock_manager.py"
# Example if client is elsewhere:
# CLIENT_SCRIPT_CMD="python /path/to/your/tools/asset-lock-manager/client/asset_lock_manager.py"
# Example if client is in PATH:
# CLIENT_SCRIPT_CMD="asset_lock_manager.py"

echo "Running pre-commit hook to verify UE5 asset locks..."
staged_files=$(git diff --cached --name-only)
has_locked_assets=0

if [ -n "$VERBOSE" ]; then echo "Fetching current lock user..."; fi
current_lock_user=$(python client/asset_lock_manager.py currentuser)
current_lock_user_exit_code=$?
if [ -n "$VERBOSE" ]; then
    echo "  currentuser command exit code: $current_lock_user_exit_code"
    echo "  currentuser raw output: '$current_lock_user'"
fi

if [ $current_lock_user_exit_code -ne 0 ]; then
    echo "ERROR: Could not determine current lock user from API (Exit Code: $current_lock_user_exit_code)."
    echo "       Ensure the asset_lock_manager client is configured and the API is reachable."
    echo "       Run 'python client/asset_lock_manager.py currentuser' manually for details."
    echo "       Aborting pre-commit."
    exit 1
fi

if [ -n "$VERBOSE" ]; then echo "Current lock user from API: '$current_lock_user'"; fi

for file in $staged_files; do
    # Check only .uasset and .umap files
    if echo "$file" | grep -qE '\.(uasset|umap)$'; then
        if [ -n "$VERBOSE" ]; then echo "Checking lock status for asset: $file"; fi
        # Use the client script (assumes it's runnable as python client/asset_lock_manager.py)
        lock_status=$(python client/asset_lock_manager.py check "$file")
        check_exit_code=$?
        if [ -n "$VERBOSE" ]; then
            echo "  check command exit code: $check_exit_code"
            echo "  check raw output: '$lock_status'"
        fi

        if [ $check_exit_code -ne 0 ]; then
            echo "ERROR: Error checking lock status for asset '$file' (Exit Code: $check_exit_code)."
            echo "       Run 'python client/asset_lock_manager.py check "$file"' manually for details."
            echo "       Aborting pre-commit."
            exit 1
        fi

        is_locked=$(echo "$lock_status" | jq -r '.is_locked')
        if [ -n "$VERBOSE" ]; then echo "  is_locked value: $is_locked"; fi

        if [ "$is_locked" = "true" ]; then
            locked_by_user=$(echo "$lock_status" | jq -r '.locked_by')
            if [ -n "$VERBOSE" ]; then echo "  Asset '$file' is locked by: '$locked_by_user'"; fi

            # Use simple string comparison
            if [ "$current_lock_user" != "$locked_by_user" ]; then
                echo "ERROR: Asset '$file' is locked by '$locked_by_user'. Cannot commit." >&2
                has_locked_assets=1
            else
                if [ -n "$VERBOSE" ]; then echo "  Asset '$file' is locked by you. Commit allowed."; fi
            fi
        else
             if [ -n "$VERBOSE" ]; then echo "  Asset '$file' is not locked."; fi
        fi
    fi
done

if [ $has_locked_assets -ne 0 ]; then
    echo "COMMIT REJECTED: One or more UE assets are locked by another user." >&2
    exit 1
fi

echo "All staged UE assets OK. Proceeding with commit."
exit 0